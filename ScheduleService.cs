using ToDoApi.DataTransferObjects;
using Microsoft.EntityFrameworkCore;
using ToDoApi.Models;

namespace ToDoApi.Services
{
    public class ScheduleService : IScheduleService
    {
        private readonly EducationClassContext _context;

        public ScheduleService(EducationClassContext context)
        {
            _context = context;
        }

        public async Task<EducationClassCreateDTO> CreateEducationClassAsync(EducationClassCreateDTO educationClassCreateDTO)
        {
            var entity = new EducationClass
            {
                Hours = educationClassCreateDTO.Hours,
                DayId = educationClassCreateDTO.DayId,
                EducationClassSubjects = educationClassCreateDTO.SubjectIds.Select(id => new EducationClassSubject { SubjectId = id }).ToList(),
                EducationClassTeachers = educationClassCreateDTO.TeacherIds.Select(id => new EducationClassTeacher { TeacherId = id }).ToList()
            };

            _context.EducationClasses.Add(entity);
            await _context.SaveChangesAsync();

            educationClassCreateDTO.Id = entity.Id; // Assuming Id is generated by the database
            return educationClassCreateDTO;
        }

        public async Task<EducationClassCreateDTO> GetEducationClassByIdAsync(long id)
        {
            var entity = await _context.EducationClasses
                .Include(e => e.EducationClassSubjects)
                .Include(e => e.EducationClassTeachers)
                .FirstOrDefaultAsync(e => e.Id == id);

            if (entity == null)
            {
                return null;
            }

            return new EducationClassCreateDTO
            {
                Hours = entity.Hours,
                DayId = entity.DayId,
                SubjectIds = entity.EducationClassSubjects.Select(s => s.SubjectId).ToList(),
                TeacherIds = entity.EducationClassTeachers.Select(t => t.TeacherId).ToList()
            };
        }

        public async Task<IEnumerable<EducationClassCreateDTO>> GetAllEducationClassesAsync()
        {
            return await _context.EducationClasses
                .Include(e => e.EducationClassSubjects)
                .Include(e => e.EducationClassTeachers)
                .Select(entity => new EducationClassCreateDTO
                {
                    Hours = entity.Hours,
                    DayId = entity.DayId,
                    SubjectIds = entity.EducationClassSubjects.Select(s => s.SubjectId).ToList(),
                    TeacherIds = entity.EducationClassTeachers.Select(t => t.TeacherId).ToList()
                })
                .ToListAsync();
        }

        public async Task UpdateEducationClassAsync(long id, EducationClassCreateDTO educationClassCreateDTO)
        {
            var entity = await _context.EducationClasses
                .Include(e => e.EducationClassSubjects)
                .Include(e => e.EducationClassTeachers)
                .FirstOrDefaultAsync(e => e.Id == id);

            if (entity == null)
            {
                throw new KeyNotFoundException("Education class not found");
            }

            entity.Hours = educationClassCreateDTO.Hours;
            entity.DayId = educationClassCreateDTO.DayId;
            entity.EducationClassSubjects = educationClassCreateDTO.SubjectIds.Select(id => new EducationClassSubject { SubjectId = id }).ToList();
            entity.EducationClassTeachers = educationClassCreateDTO.TeacherIds.Select(id => new EducationClassTeacher { TeacherId = id }).ToList();

            _context.EducationClasses.Update(entity);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteEducationClassAsync(long id)
        {
            var entity = await _context.EducationClasses.FindAsync(id);
            if (entity == null)
            {
                throw new KeyNotFoundException("Education class not found");
            }

            _context.EducationClasses.Remove(entity);
            await _context.SaveChangesAsync();
        }
    }
}
